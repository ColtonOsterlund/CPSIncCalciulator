#pragma checksum "D:\Programming_Repositories\CPSSliderWebProgram\CPSSliderReturnOnInvestmentWebPage\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f00fb70e6136ae0e05ca6815cb39281307244d08"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(CPSSliderReturnOnInvestmentWebPage.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace CPSSliderReturnOnInvestmentWebPage.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Programming_Repositories\CPSSliderWebProgram\CPSSliderReturnOnInvestmentWebPage\Pages\_ViewImports.cshtml"
using CPSSliderReturnOnInvestmentWebPage;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f00fb70e6136ae0e05ca6815cb39281307244d08", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"17a7efb1d089bec5e18032e69273fccbbc275860", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Ration Change Scenario", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Bolus Scenario", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/site.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "D:\Programming_Repositories\CPSSliderWebProgram\CPSSliderReturnOnInvestmentWebPage\Pages\Index.cshtml"
  
    ViewData["Title"] = "Calciulator Tool";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f00fb70e6136ae0e05ca6815cb39281307244d084959", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
    <meta http-equiv=""X-UA-Compatible"" content=""ie=edge"" />
    <title>Calciulator</title>
    <link rel=""stylesheet"" href=""css/bootstrap.min.css"" />
    <link rel=""stylesheet"" href=""css/templatemo-style.css"" />
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f00fb70e6136ae0e05ca6815cb39281307244d086266", async() => {
                WriteLiteral(@"
    <section id=""hero"" class=""text-white tm-font-big tm-parallax"">

        <div class=""text-center tm-hero-text-container"">
            <div class=""tm-hero-text-container-inner"">
                <h2 class=""tm-hero-title"">Calciulator</h2>
                <p class=""tm-hero-subtitle"">
                    Creative Protein Solutions Inc.
                </p>
            </div>
        </div>

        <div id=""scenarioDropdownDiv"" class=""tm-next tm-intro-next"">

            <label for=""scenarioDropdown"">Select a Scenario:</label>

            <select name=""scenarioDropdown"" id=""scenarioDropdown"" onchange=""changeScenario()"">
                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f00fb70e6136ae0e05ca6815cb39281307244d087206", async() => {
                    WriteLiteral("-");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                BeginWriteTagHelperAttribute();
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
                BeginWriteTagHelperAttribute();
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __tagHelperExecutionContext.AddHtmlAttribute("disabed", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
                BeginWriteTagHelperAttribute();
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __tagHelperExecutionContext.AddHtmlAttribute("hidden", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f00fb70e6136ae0e05ca6815cb39281307244d089406", async() => {
                    WriteLiteral("Ration Change");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f00fb70e6136ae0e05ca6815cb39281307244d0810652", async() => {
                    WriteLiteral("Bolus");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
            </select>

        </div>

    </section>

    <section id=""introduction"" class=""tm-section-pad-top"">

        <div class=""text-center"" id=""rationChangeScenarioSliderTool"" style=""display: none;  background-color: lightblue;"" >
            <div class=""preambleText"">
                <b>
                    This tool was designed to demonstrate how testing can allow farmers to target their treatment and
                    save money on boluses. By using blanket treatments/being indiscriminate in which cows receive
                    supplements, farmers are leaving money on the table by treating cows that do not require it.
                    This tool assumes that the farmer will test all of their cows to determine which ones need boluses and
                    which do not, thereby allowing them to make informed decisions and save money in the process by
                    only treating the cows in need.
                </b>
            </div>
            <div>
          ");
                WriteLiteral(@"      --------------------------------------------------------------------------------------------------------------------------------------------------------------------
            </div>
            <div id=""sliderDiv"">
                <label for=""numberOfCowsCalvingSlider"">Number of cows calving per year: </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""numberOfCowsCalvingSlider"" value=""0"" min=""0"" max=""500"" step=""10""");
                BeginWriteAttribute("oninput", " oninput=\"", 2827, "\"", 2837, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"0\" min=\"0\" max=\"500\"");
                BeginWriteAttribute("onchange", " onchange=\"", 2915, "\"", 2926, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton1\"");
                BeginWriteAttribute("onclick", " onclick=\"", 2993, "\"", 3003, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""costOfAdditivePerkgSlider"">Cost of additive per kg ($): </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""costOfAdditivePerkgSlider"" value=""0"" min=""0"" max=""1000"" step=""25""");
                BeginWriteAttribute("oninput", " oninput=\"", 3317, "\"", 3327, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"0.00\" min=\"0\" max=\"1000\"");
                BeginWriteAttribute("onchange", " onchange=\"", 3409, "\"", 3420, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton2\"");
                BeginWriteAttribute("onclick", " onclick=\"", 3487, "\"", 3497, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""additionalAdditiveHeadDaySlider"">Change in dry cow additive per head per day (g): </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""additionalAdditiveHeadDaySlider"" value=""0"" min=""0"" max=""1000"" step=""25""");
                BeginWriteAttribute("oninput", " oninput=\"", 3843, "\"", 3853, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"0\" min=\"0\" max=\"1000\"");
                BeginWriteAttribute("onchange", " onchange=\"", 3932, "\"", 3943, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton3\"");
                BeginWriteAttribute("onclick", " onclick=\"", 4010, "\"", 4020, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""numberOfDaysOnTheRationSlider"">Number of days on the ration: </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""numberOfDaysOnTheRationSlider"" value=""0"" min=""0"" max=""182"" step=""2""");
                BeginWriteAttribute("oninput", " oninput=\"", 4341, "\"", 4351, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"0\" min=\"0\" max=\"182\"");
                BeginWriteAttribute("onchange", " onchange=\"", 4429, "\"", 4440, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton4\"");
                BeginWriteAttribute("onclick", " onclick=\"", 4507, "\"", 4517, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""prevalenceOfSCHSlider"">Prevalence of SCH (%): </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""prevalenceOfSCHSlider"" value=""50"" min=""0"" max=""100""");
                BeginWriteAttribute("oninput", " oninput=\"", 4807, "\"", 4817, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"50\" min=\"0\" max=\"100\"");
                BeginWriteAttribute("onchange", " onchange=\"", 4896, "\"", 4907, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton5\"");
                BeginWriteAttribute("onclick", " onclick=\"", 4974, "\"", 4984, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""prevalenceOfMFSlider"">Prevalence of MF (%): </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""prevalenceOfMFSlider"" value=""2"" min=""0"" max=""100""");
                BeginWriteAttribute("oninput", " oninput=\"", 5270, "\"", 5280, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"2\" min=\"0\" max=\"100\"");
                BeginWriteAttribute("onchange", " onchange=\"", 5358, "\"", 5369, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton6\"");
                BeginWriteAttribute("onclick", " onclick=\"", 5436, "\"", 5446, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""numberOfCowsTestedSlider"">Percentage of cows tested (%): </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""numberOfCowsTestedSlider"" value=""0"" min=""0"" max=""100""");
                BeginWriteAttribute("oninput", " oninput=\"", 5749, "\"", 5759, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"0\" min=\"0\" max=\"100\"");
                BeginWriteAttribute("onchange", " onchange=\"", 5837, "\"", 5848, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton7\"");
                BeginWriteAttribute("onclick", " onclick=\"", 5915, "\"", 5925, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
            </div>
            <div>
                --------------------------------------------------------------------------------------------------------------------------------------------------------------------
            </div>
            <div id=""buttonDiv"">
                <button type=""button"" id=""calculateCostBenefitButton""");
                BeginWriteAttribute("onclick", " onclick=\"", 6283, "\"", 6293, 0);
                EndWriteAttribute();
                WriteLiteral(">Calculate Cost Benefit</button>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button type=\"button\" id=\"resetDefaultsButton1\"");
                BeginWriteAttribute("onclick", " onclick=\"", 6475, "\"", 6485, 0);
                EndWriteAttribute();
                WriteLiteral(@">Reset Default Values</button>
                <br>
                <br>
                <b>Cost Benefit: </b>
                <b style=""color: black"">$</b><output id=""costBenefitOutput"">0.00</output>
                <br>
                <br>
                <b>Cost Benefit Per Cow: </b>
                <b style=""color: black"">$</b><output id=""costBenefitOutputPerCow"">0.00</output>
            </div>
        </div>





        <div class=""text-center"" id=""bolusScenarioSliderTool"" style=""display: none; background-color: lightblue;"">
            <div class=""preambleText"" style=""background-color: lightblue;"">
                <b>
                    This tool was designed to demonstrate the power of knowing your herd's overall health. Testing
                    is crucial to improving your bottom line. Many farmers are unaware of the highly prevalent
                    subclinical cases of milk fever that silently impact milk production and lead to other transition
                    cow");
                WriteLiteral(@" diseases. This tool shows that even if you must spend money on feed additives such as
                    calcium binders or anionic salts, you still win in the long run by saving on the steep costs
                    associated with milk fever. And all of this is possible thanks to the ability to test and monitor your
                    herd using CPS rapid on-farm diagnostics.
                </b>
            </div>
            <div>
                --------------------------------------------------------------------------------------------------------------------------------------------------------------------
            </div>
            <div id=""sliderDiv"">
                <label for=""numberOfCowsCalvingSlider2"">Number of cows calving per year: </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""numberOfCowsCalvingSlider2"" value=""0"" min=""0"" max=""500"" step=""10""");
                BeginWriteAttribute("oninput", " oninput=\"", 8457, "\"", 8467, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"0\" min=\"0\" max=\"500\"");
                BeginWriteAttribute("onchange", " onchange=\"", 8545, "\"", 8556, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton8\"");
                BeginWriteAttribute("onclick", " onclick=\"", 8623, "\"", 8633, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""numberOfHeifersCalvingSlider2"">Number of heifers calving per year: </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""numberOfHeifersCalvingSlider2"" value=""0"" min=""0"" max=""300"" step=""10""");
                BeginWriteAttribute("oninput", " oninput=\"", 8961, "\"", 8971, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"0\" min=\"0\" max=\"300\"");
                BeginWriteAttribute("onchange", " onchange=\"", 9049, "\"", 9060, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton9\"");
                BeginWriteAttribute("onclick", " onclick=\"", 9127, "\"", 9137, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""costOfBolusPerUnitSlider2"">Cost of bolus per unit ($): </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""costOfBolusPerUnitSlider2"" value=""1000"" min=""0"" max=""1200"" step=""25""");
                BeginWriteAttribute("oninput", " oninput=\"", 9453, "\"", 9463, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"10.00\" min=\"0\" max=\"1200\"");
                BeginWriteAttribute("onchange", " onchange=\"", 9546, "\"", 9557, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton10\"");
                BeginWriteAttribute("onclick", " onclick=\"", 9625, "\"", 9635, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""numberOfBolusesPerCowSlider2"">Number of boluses per cow: </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""numberOfBolusesPerCowSlider2"" value=""0"" min=""0"" max=""5"" step=""1""");
                BeginWriteAttribute("oninput", " oninput=\"", 9949, "\"", 9959, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"0\" min=\"0\" max=\"5\"");
                BeginWriteAttribute("onchange", " onchange=\"", 10035, "\"", 10046, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton11\"");
                BeginWriteAttribute("onclick", " onclick=\"", 10114, "\"", 10124, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""numberOfBolusesPerHeiferSlider2"">Number of boluses per heifer: </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""numberOfBolusesPerHeiferSlider2"" value=""0"" min=""0"" max=""5"" step=""1""");
                BeginWriteAttribute("oninput", " oninput=\"", 10447, "\"", 10457, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"0\" min=\"0\" max=\"5\"");
                BeginWriteAttribute("onchange", " onchange=\"", 10533, "\"", 10544, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton12\"");
                BeginWriteAttribute("onclick", " onclick=\"", 10612, "\"", 10622, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""prevalenceOfCowSCHSlider2"">Prevalence of cow SCH (%): </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""prevalenceOfCowSCHSlider2"" value=""50"" min=""0"" max=""100""");
                BeginWriteAttribute("oninput", " oninput=\"", 10924, "\"", 10934, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"50\" min=\"0\" max=\"100\"");
                BeginWriteAttribute("onchange", " onchange=\"", 11013, "\"", 11024, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton13\"");
                BeginWriteAttribute("onclick", " onclick=\"", 11092, "\"", 11102, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""prevalenceOfCowMFSlider2"">Prevalence of cow MF (%): </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""prevalenceOfCowMFSlider2"" value=""5"" min=""0"" max=""100""");
                BeginWriteAttribute("oninput", " oninput=\"", 11400, "\"", 11410, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"5\" min=\"0\" max=\"100\"");
                BeginWriteAttribute("onchange", " onchange=\"", 11488, "\"", 11499, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton14\"");
                BeginWriteAttribute("onclick", " onclick=\"", 11567, "\"", 11577, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""prevalenceOfHeiferSCHSlider2"">Prevalence of heifer SCH (%): </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""prevalenceOfHeiferSCHSlider2"" value=""25"" min=""0"" max=""100""");
                BeginWriteAttribute("oninput", " oninput=\"", 11888, "\"", 11898, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"25\" min=\"0\" max=\"100\"");
                BeginWriteAttribute("onchange", " onchange=\"", 11977, "\"", 11988, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton15\"");
                BeginWriteAttribute("onclick", " onclick=\"", 12056, "\"", 12066, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
                <br>
                <br>
                <label for=""prevalenceOfHeiferMFSlider2"">Prevalence of heifer MF (%): </label>
                <div align=""center"">
                    <input class=""slider"" type=""range"" id=""prevalenceOfHeiferMFSlider2"" value=""1"" min=""0"" max=""100""");
                BeginWriteAttribute("oninput", " oninput=\"", 12373, "\"", 12383, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                </div>\r\n                <input value=\"1\" min=\"0\" max=\"100\"");
                BeginWriteAttribute("onchange", " onchange=\"", 12461, "\"", 12472, 0);
                EndWriteAttribute();
                WriteLiteral(" size=\"5\">\r\n                <button type=\"button\" id=\"infoButton16\"");
                BeginWriteAttribute("onclick", " onclick=\"", 12540, "\"", 12550, 0);
                EndWriteAttribute();
                WriteLiteral(@">?</button>
            </div>
            <div>
                --------------------------------------------------------------------------------------------------------------------------------------------------------------------
            </div>
            <div id=""buttonDiv"">
                <button type=""button"" id=""calculateCostBenefitButton2""");
                BeginWriteAttribute("onclick", " onclick=\"", 12909, "\"", 12919, 0);
                EndWriteAttribute();
                WriteLiteral(">Calculate Cost Benefit</button>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button type=\"button\" id=\"resetDefaultsButton2\"");
                BeginWriteAttribute("onclick", " onclick=\"", 13101, "\"", 13111, 0);
                EndWriteAttribute();
                WriteLiteral(@">Reset Default Values</button>
                <br>
                <br>
                <b>Cost Benefit (Cows): </b>
                <b style=""color: black"">$</b><output id=""costBenefitOutputCows2"">0.00</output>
                &nbsp;&nbsp;&nbsp;&nbsp;
                &nbsp;&nbsp;&nbsp;&nbsp;
                <b>Savings per Cow by Testing: </b>
                <b style=""color: black"">$</b><output id=""costBenefitOutputPerCow2"">0.00</output>
                <br>
                <br>
                <b>Cost Benefit (Heifers): </b>
                <b style=""color: black"">$</b><output id=""costBenefitOutputHeifers2"">0.00</output>
                &nbsp;&nbsp;&nbsp;&nbsp;
                &nbsp;&nbsp;&nbsp;&nbsp;
                <b>Savings per Heifer by Testing: </b>
                <b style=""color: black"">$</b><output id=""heiferBolusSavingsPerTreatment"">0.00</output>
            </div>
        </div>

    </section>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f00fb70e6136ae0e05ca6815cb39281307244d0833768", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
